name: Continuous Delivery

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches:
      - main

jobs:
  confirm_ci_success:
    name: Confirm CI Success
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: CI Workflow Succeeded
        run: echo "CI workflow on main branch for commit ${{ github.event.workflow_run.head_sha }} was successful. Proceeding with CD."

  create_release:
    name: Create Semantic Release
    runs-on: ubuntu-latest
    needs: confirm_ci_success
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.semantic_release.outputs.version }}
      new_version_tag: ${{ steps.semantic_release.outputs.version_tag }}
      release_created: ${{ steps.semantic_release.outputs.release_created }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }} 

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install UV
        uses: astral-sh/setup-uv@v6

      - name: Install project and dev dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y git
          uv sync --all-extras

      - name: Show Git status and commit history for semantic-release
        run: |
          echo "--- Current pyproject.toml version (before semantic-release) ---"
          grep "version = " pyproject.toml || echo "version not found in pyproject.toml"
          echo "--- Git Tags ---"
          git tag -l
          echo "--- Latest tag ---"
          LATEST_TAG_CMD="git describe --tags --abbrev=0 $(git rev-list --tags --max-count=1 2>/dev/null)"
          LATEST_TAG=$($LATEST_TAG_CMD) || echo "No tags found or error describing tags."
          echo "Latest tag determined as: $LATEST_TAG"
          echo "--- Commits on main since latest tag (or all if no tags) ---"
          if [ -n "$LATEST_TAG" ] && [ "$LATEST_TAG" != "No tags found or error describing tags." ] ; then
            git log ${LATEST_TAG}..HEAD --oneline
          else
            git log --oneline
          fi
          
      - name: Configure Git User for semantic-release
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Run Semantic Release
        id: semantic_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running: uv run semantic-release publish --verbose"
        
          uv run semantic-release --verbose publish
          
          LATEST_GIT_TAG_AFTER_PUBLISH=$(git describe --tags --abbrev=0 `git rev-list --tags --max-count=1`)
          VERSION_NUMBER_AFTER_PUBLISH=${LATEST_GIT_TAG_AFTER_PUBLISH#v}
          
          echo "version=${VERSION_NUMBER_AFTER_PUBLISH}" >> $GITHUB_OUTPUT
          echo "version_tag=${LATEST_GIT_TAG_AFTER_PUBLISH}" >> $GITHUB_OUTPUT
          
          echo "release_created=true" >> $GITHUB_OUTPUT # Assume success if no error
          echo "Semantic Release process finished. Latest tag is now: ${LATEST_GIT_TAG_AFTER_PUBLISH}"

          echo "--- Current pyproject.toml version (after semantic-release) ---"
          grep "version = " pyproject.toml || echo "version not found in pyproject.toml"

  build_and_push_image:
    name: Build and Push Docker Image to GHCR
    runs-on: ubuntu-latest
    needs: create_release
    permissions:
      contents: read
      packages: write

    steps:
      - name: Get version from release job
        id: version_info
        run: |
          echo "version_tag=${{ needs.create_release.outputs.new_version_tag }}" >> $GITHUB_OUTPUT
          echo "version_num=${{ needs.create_release.outputs.new_version }}" >> $GITHUB_OUTPUT
          echo "Building image for tag: ${{ needs.create_release.outputs.new_version_tag }} (version: ${{ needs.create_release.outputs.new_version }})"

      - name: Checkout code at the new version tag
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.version_info.outputs.version_tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ steps.version_info.outputs.version_num }}
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Image digest
        run: |
          echo "Pushed image digest: ${{ steps.docker_build.outputs.digest }}"
